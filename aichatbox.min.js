

const chatWidget = document.getElementById('chat-widget');
const chatToggle = document.getElementById('chat-toggle');
const chatMessages = document.getElementById('chat-messages');
const chatForm = document.getElementById('chat-form');
const messageInput = document.getElementById('message-input');
const chatLoader = document.getElementById('chat-loader');
const chatCloseBtn = document.getElementById('chat-close-btn');
const sendButton = chatForm.querySelector('button');
const historyLoader = document.getElementById('history-loader');

document.addEventListener("DOMContentLoaded", function () {
    if (!chatContainer) return;

    chatContainer.innerHTML = `
        <div class="chat-header">
            <span>BOPO Assistant</span>
            <button id="chat-close-btn" class="chat-close-btn">&times;</button>
        </div>
        <div class="chat-messages" id="chat-messages">
            <div id="history-loader"><div class="spinner"></div></div>
            <div class="chat-loader hidden" id="chat-loader"></div>
        </div>
        <form class="chat-input" id="chat-form">
            <input type="text" id="message-input" placeholder="Nhập tin nhắn..." autocomplete="off">
            <button type="submit" disabled>Gửi</button>
        </form>
    `;
});

// URL của Web API .NET
const BASE_API_URL = 'http://localhost:5000/api';

let sessionId = localStorage.getItem('chatSessionId') || crypto.randomUUID();
localStorage.setItem('chatSessionId', sessionId);

let currentPage = 1;
let isLoadingMore = false;
let hasMoreMessages = true;
// Biến để theo dõi ngày của tin nhắn cuối cùng
let lastMessageDate = null;

// Mở/đóng widget
chatToggle.addEventListener('click', () => {
    chatWidget.classList.toggle('open');
    // Nếu widget được mở và lịch sử chưa được tải, thì tải nó
    if (chatWidget.classList.contains('open') && currentPage === 1 && !isLoadingMore) {
        loadChatHistory(true);
    }
});

chatCloseBtn.addEventListener('click', () => {
    chatWidget.classList.remove('open');
});

// --- SỰ KIỆN CUỘN CHUỘT ĐỂ TẢI THÊM ---
chatMessages.addEventListener('scroll', () => {
    if (chatMessages.scrollTop === 0 && !isLoadingMore && hasMoreMessages) {
        loadChatHistory(false); // false: không phải lần tải đầu
    }
});

// --- Tải lịch sử chat từ server ---
async function loadChatHistory(isInitialLoad) {
    if (isInitialLoad) {
        chatLoader.classList.remove('hidden');
    } else {
        historyLoader.style.display = 'block';
    }
    isLoadingMore = true;

    const historyUrl = `${BASE_API_URL}/webchat/history/${sessionId}?page=${currentPage}&pageSize=5`;
    try {
        const response = await fetch(historyUrl);

        if (!response.ok) {
            if (isInitialLoad) addWelcomeMessage();
            hasMoreMessages = false;
            return;
        }

        const data = await response.json();
        const history = data.messages;
        hasMoreMessages = data.hasMoreMessages;

        if (isInitialLoad && (!history || history.length === 0)) {
            addWelcomeMessage();
            return;
        }

        // Lưu lại vị trí cuộn cũ để giữ màn hình không bị nhảy
        const oldScrollHeight = chatMessages.scrollHeight;

        // Chèn tin nhắn cũ vào ĐẦU danh sách
        history.reverse().forEach(msg => {
            addMessage(msg.sender.toLowerCase(), msg.content, true, msg.timestamp); // true: chèn vào đầu
        });

        // Cập nhật lại logic hiển thị ngày cho toàn bộ tin nhắn
        updateAllDateSeparators();

        // Giữ vị trí cuộn sau khi thêm tin nhắn
        if (!isInitialLoad) {
            chatMessages.scrollTop = chatMessages.scrollHeight - oldScrollHeight;
        } else {
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        currentPage++;

    } catch (error) {
        console.error('Failed to load chat history:', error);
        if (isInitialLoad) addWelcomeMessage();
    } finally {
        isLoadingMore = false;
        chatLoader.classList.add('hidden');
        historyLoader.style.display = 'none';
    }
}

function updateAllDateSeparators() {
    // Xóa tất cả dấu phân cách cũ
    chatMessages.querySelectorAll('.date-separator').forEach(el => el.remove());

    const allMessages = chatMessages.querySelectorAll('.message');
    let lastDate = null;

    allMessages.forEach(msgElement => {
        // Gán timestamp khi tạo tin nhắn để dùng lại ở đây
        const timestamp = msgElement.dataset.timestamp;
        if (!timestamp) return;

        const messageDate = new Date(timestamp);
        const messageDateString = messageDate.toDateString();

        if (lastDate !== messageDateString) {
            addDateSeparator(messageDate, msgElement); // Chèn vào trước tin nhắn
            lastDate = messageDateString;
        }
    });
}

// --- HÀM THÊM DẤU PHÂN CÁCH NGÀY ---
function addDateSeparator(date, beforeElement) {
    const separatorElement = document.createElement('div');
    separatorElement.classList.add('date-separator');

    const today = new Date();
    const yesterday = new Date();
    yesterday.setDate(yesterday.getDate() - 1);

    // Định dạng ngày tháng cho đẹp hơn
    if (date.toDateString() === today.toDateString()) {
        separatorElement.textContent = 'Hôm nay';
    } else if (date.toDateString() === yesterday.toDateString()) {
        separatorElement.textContent = 'Hôm qua';
    } else {
        separatorElement.textContent = date.toLocaleDateString('vi-VN', {
            weekday: 'long', year: 'numeric', month: 'numeric', day: 'numeric'
        });
    }

    chatMessages.insertBefore(separatorElement, beforeElement);
}

// Hàm thêm tin nhắn vào giao diện
function addMessage(sender, text, prepend = false, timestamp = null) {
    const messageElement = document.createElement('div');
    messageElement.classList.add('message', sender);
    // Lưu timestamp để dùng cho việc hiển thị ngày
    messageElement.dataset.timestamp = timestamp || new Date().toISOString();

    const textElement = document.createElement('div');
    textElement.classList.add('text');

    // Nếu là tin nhắn loading, chèn HTML của các dấu chấm
    if (sender === 'bot' && text === '...') {
        textElement.innerHTML = `
                    <div class="loading-dots">
                        <span></span>
                        <span></span>
                        <span></span>
                    </div>
                `;
    } else {
        textElement.textContent = text;
    }

    messageElement.appendChild(textElement);

    if (prepend) {
        chatMessages.insertBefore(messageElement, historyLoader.nextSibling);
    } else {
        chatMessages.appendChild(messageElement);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }
}

// Gửi tin nhắn đến API
async function sendMessage(text) {
    updateAllDateSeparators(); // Cập nhật ngày trước khi gửi

    addMessage('user', text);
    messageInput.value = '';
    sendButton.disabled = true;
    addMessage('bot', '...'); // Hiển thị loading

    try {
        const chatUrl = `${BASE_API_URL}/webchat`;
        const response = await fetch(chatUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ sessionId: sessionId, message: text })
        });

        if (!response.ok) {
            throw new Error('Network response was not ok');
        }

        const data = await response.json();

        chatMessages.removeChild(chatMessages.lastChild); // Xóa loading
        addMessage('bot', data.reply);

    } catch (error) {
        console.error('Error:', error);
        chatMessages.removeChild(chatMessages.lastChild);
        addMessage('bot', 'Xin lỗi, đã có lỗi xảy ra. Vui lòng thử lại.');
    }
}

// Xử lý form submit
chatForm.addEventListener('submit', (e) => {
    e.preventDefault();
    const text = messageInput.value.trim();
    if (text) {
        sendMessage(text);
    }
});

// Thêm tin nhắn chào mừng (chỉ khi chưa có tin nhắn nào)
function addWelcomeMessage() {
    if (chatMessages.querySelectorAll('.message').length === 0) {
        addMessage('bot', 'Chào bạn, mình là trợ lý ảo BOPO! Mình có thể giúp gì cho bạn?');
        updateAllDateSeparators();
    }
}

messageInput.addEventListener('input', () => {
    sendButton.disabled = messageInput.value.trim() === '';
});