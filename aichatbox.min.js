document.addEventListener("DOMContentLoaded", function () {
    const chatWidgetContainer = document.getElementById("chat-widget-container");
    if (!chatWidgetContainer) {
        console.error("Chat widget container with ID 'chat-widget-container' not found.");
        return;
    }

    const dentistryCd = chatWidgetContainer.dataset.dentistryCd || null;

    chatWidgetContainer.innerHTML = `
            <div id="chat-widget" class="chat-widget">
                <div class="chat-header">
                    <span>BOPO Assistant</span>
                    <button id="chat-close-btn" class="chat-close-btn">&times;</button>
                </div>
                <div class="chat-messages" id="chat-messages">
                    <div id="history-loader"><div class="spinner"></div></div>
                    <div class="chat-loader hidden" id="chat-loader"></div>
                </div>
                <form class="chat-input" id="chat-form">
                    <input type="text" id="message-input" placeholder="Nh·∫≠p tin nh·∫Øn..." autocomplete="off">
                    <button type="submit" disabled>G·ª≠i</button>
                </form>
            </div>
            <button id="chat-toggle">üí¨</button>
             `;

    const chatWidget = document.getElementById("chat-widget");
    const chatToggle = document.getElementById("chat-toggle");
    const chatMessages = chatWidget.querySelector("#chat-messages");
    const chatForm = chatWidget.querySelector("#chat-form");
    const messageInput = chatWidget.querySelector("#message-input");
    const chatLoader = chatWidget.querySelector("#chat-loader");
    const chatCloseBtn = chatWidget.querySelector("#chat-close-btn");
    const sendButton = chatForm.querySelector("button");
    const historyLoader = chatWidget.querySelector("#history-loader");

    const CHAT_API_URL = "http://192.168.2.175:5000/api";
    const DENTISTRY_API_URL = "http://192.168.2.175:8600/api/dentistries";

    let sessionId = localStorage.getItem(`chatSessionId-${dentistryCd || 'general'}`) || crypto.randomUUID();
    localStorage.setItem(`chatSessionId-${dentistryCd || 'general'}`, sessionId);

    let currentPage = 1;
    let isLoadingMore = false;
    let hasMoreMessages = true;
    let hasInitiallyLoaded = false;

    async function loadChatHistory(isInitialLoad) {
        if (isLoadingMore) return;
        if (isInitialLoad) chatLoader.classList.remove("hidden");
        else historyLoader.style.display = "block";
        isLoadingMore = true;

        const historyUrl = `${CHAT_API_URL}/webchat/history/${sessionId}?page=${currentPage}&pageSize=10`;

        try {
            const response = await fetch(historyUrl);
            if (!response.ok) {
                if (isInitialLoad) addWelcomeMessage();
                hasMoreMessages = false; return;
            }
            const data = await response.json();
            const history = data.messages;
            hasMoreMessages = data.hasMoreMessages;

            if (isInitialLoad && (!history || history.length === 0)) {
                addWelcomeMessage(); return;
            }

            const oldScrollHeight = chatMessages.scrollHeight;

            const reversedHistory = history.reverse();
            for (const msg of reversedHistory) {
                if (msg.sender.toLowerCase() === 'bot') {
                    // Th·ª≠ x·ª≠ l√Ω tin nh·∫Øn c·ªßa bot nh∆∞ m·ªôt c√¢u l·ªánh
                    const handledAsCommand = await handleBotReply(msg.content, true, msg.timestamp);
                    // N·∫øu kh√¥ng ph·∫£i l√† l·ªánh, hi·ªÉn th·ªã nh∆∞ b√¨nh th∆∞·ªùng
                    if (!handledAsCommand) {
                        addMessage('bot', msg.content, true, msg.timestamp);
                    }
                } else {
                    // Tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng lu√¥n ƒë∆∞·ª£c hi·ªÉn th·ªã
                    addMessage('user', msg.content, true, msg.timestamp);
                }
            }

            updateAllDateSeparators();

            if (isInitialLoad) chatMessages.scrollTop = chatMessages.scrollHeight;
            else chatMessages.scrollTop = chatMessages.scrollHeight - oldScrollHeight;

            currentPage++;
        } catch (error) {
            console.error("Failed to load chat history:", error);
            if (isInitialLoad) addWelcomeMessage();
        } finally {
            isLoadingMore = false;
            chatLoader.classList.add("hidden");
            historyLoader.style.display = "none";
            if (isInitialLoad) hasInitiallyLoaded = true;
        }
    }

    function updateAllDateSeparators() {
        chatMessages.querySelectorAll(".date-separator").forEach(el => el.remove());
        const allMessageWrappers = chatMessages.querySelectorAll(".message-wrapper");
        let lastDate = null;
        allMessageWrappers.forEach(wrapper => {
            const timestamp = wrapper.dataset.timestamp;
            if (!timestamp) return;
            const messageDate = new Date(timestamp);
            const messageDateString = messageDate.toDateString();
            if (lastDate !== messageDateString) {
                addDateSeparator(messageDate, wrapper);
                lastDate = messageDateString;
            }
        });
    }

    function addDateSeparator(date, beforeElement) {
        const separatorElement = document.createElement("div");
        separatorElement.classList.add("date-separator");
        const today = new Date();
        const yesterday = new Date();
        yesterday.setDate(yesterday.getDate() - 1);
        if (date.toDateString() === today.toDateString()) separatorElement.textContent = "H√¥m nay";
        else if (date.toDateString() === yesterday.toDateString()) separatorElement.textContent = "H√¥m qua";
        else separatorElement.textContent = date.toLocaleDateString("vi-VN", { weekday: "long", year: "numeric", month: "numeric", day: "numeric" });
        chatMessages.insertBefore(separatorElement, beforeElement);
    }

    function addMessage(sender, text, prepend = false, timestamp = null) {
        const wrapper = document.createElement("div");
        wrapper.classList.add("message-wrapper", sender);
        const messageElement = document.createElement("div");
        messageElement.classList.add("message");
        const isoTimestamp = timestamp || new Date().toISOString();
        wrapper.dataset.timestamp = isoTimestamp;
        const textElement = document.createElement("div");
        textElement.classList.add("text");
        if (sender === "bot" && text === "...") {
            textElement.innerHTML = '<div class="loading-dots"><span></span><span></span><span></span></div>';
        } else {
            textElement.innerHTML = text.replace(/\n/g, '<br>');
        }
        const timestampElement = document.createElement("div");
        timestampElement.classList.add("message-timestamp");
        const date = new Date(isoTimestamp);
        timestampElement.textContent = date.toLocaleTimeString("vi-VN", { hour: "2-digit", minute: "2-digit" });
        messageElement.appendChild(textElement);
        wrapper.appendChild(messageElement);
        wrapper.appendChild(timestampElement);
        if (prepend) chatMessages.insertBefore(wrapper, historyLoader.nextSibling);
        else {
            chatMessages.appendChild(wrapper);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
    }

    async function sendMessage(text) {
        addMessage("user", text);
        updateAllDateSeparators();
        messageInput.value = "";
        sendButton.disabled = true;
        addMessage("bot", "...");

        try {
            const chatUrl = `${CHAT_API_URL}/webchat`;
            const response = await fetch(chatUrl, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ sessionId: sessionId, message: text, dentistryCd: dentistryCd })
            });
            if (!response.ok) throw Error("Network response was not ok");
            const data = await response.json();
            chatMessages.removeChild(chatMessages.lastChild);

            const handledAsCommand = await handleBotReply(data.reply, false);
            if (!handledAsCommand) {
                addMessage('bot', data.reply);
            }

        } catch (error) {
            console.error("Error:", error);
            chatMessages.removeChild(chatMessages.lastChild);
            addMessage("bot", "Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.");
        } finally {
            sendButton.disabled = messageInput.value.trim() === "";
        }
    }

    // H√†m n√†y gi·ªù l√† async v√† tr·∫£ v·ªÅ boolean >>>
    async function handleBotReply(replyText, isFromHistory = false, timestamp = null) {
        try {
            const command = JSON.parse(replyText);
            if (command && command.intent) {
                switch (command.intent) {
                    case 'list_dentistries':
                        await fetchAndDisplayDentistries(command.data?.dentistryCd, isFromHistory, timestamp);
                        break;
                    default:
                        addMessage("bot", "L·ªánh kh√¥ng x√°c ƒë·ªãnh.", isFromHistory, timestamp);
                }
                return true; // ƒê√£ x·ª≠ l√Ω th√†nh c√¥ng nh∆∞ m·ªôt c√¢u l·ªánh
            }
        } catch (error) {
            // Kh√¥ng ph·∫£i JSON, kh√¥ng l√†m g√¨ c·∫£ v√† tr·∫£ v·ªÅ false
        }
        return false; // Kh√¥ng ph·∫£i l√† m·ªôt c√¢u l·ªánh
    }

    // <<< THAY ƒê·ªîI: H√†m n√†y gi·ªù nh·∫≠n th√™m c·ªù isFromHistory v√† timestamp >>>
    async function fetchAndDisplayDentistries(dentistryCdParam = null, isFromHistory = false, timestamp = null) {
        if (!isFromHistory) {
            addMessage("bot", "ƒêang t√¨m danh s√°ch nha khoa...");
        }

        let url = DENTISTRY_API_URL;
        if (dentistryCdParam) url += `?dentistryCd=${dentistryCdParam}`;

        try {
            const response = await fetch(url);
            if (!isFromHistory) chatMessages.removeChild(chatMessages.lastChild);

            if (!response.ok) {
                const errorMsg = response.status === 404 ? "Kh√¥ng t√¨m th·∫•y nha khoa b·∫°n y√™u c·∫ßu." : "L·ªói khi t·∫£i d·ªØ li·ªáu nha khoa.";
                addMessage("bot", errorMsg, isFromHistory, timestamp);
                return;
            }

            const data = await response.json();
            let dentistries = Array.isArray(data) ? data : [data];
            let formattedMessage;

            if (dentistries.length === 0) {
                formattedMessage = "Kh√¥ng c√≥ nha khoa n√†o trong h·ªá th·ªëng.";
            } else {
                formattedMessage = "D∆∞·ªõi ƒë√¢y l√† danh s√°ch c√°c nha khoa:\n";
                console.log(dentistries);
                dentistries.forEach(d => {
                    formattedMessage += `\n- T√™n: ${d.name}\n  ƒê·ªãa ch·ªâ: ${d.address}`;
                });
            }
            addMessage("bot", formattedMessage, isFromHistory, timestamp);
        } catch (error) {
            console.error("Error fetching dentistries:", error);
            if (!isFromHistory) chatMessages.removeChild(chatMessages.lastChild);
            addMessage("bot", "Xin l·ªói, kh√¥ng th·ªÉ t·∫£i danh s√°ch nha khoa l√∫c n√†y.", isFromHistory, timestamp);
        }
    }

    function addWelcomeMessage() {
        if (chatMessages.querySelectorAll(".message-wrapper").length === 0) {
            addMessage("bot", "Ch√†o b·∫°n, m√¨nh l√† tr·ª£ l√Ω ·∫£o BOPO! M√¨nh c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?");
            updateAllDateSeparators();
        }
    }

    chatToggle.addEventListener("click", () => {
        chatWidget.classList.toggle("open");
        if (chatWidget.classList.contains("open") && !hasInitiallyLoaded) {
            loadChatHistory(true);
        }
    });
    chatCloseBtn.addEventListener("click", () => chatWidget.classList.remove("open"));
    chatMessages.addEventListener("scroll", () => {
        if (chatMessages.scrollTop === 0 && !isLoadingMore && hasMoreMessages) {
            loadChatHistory(false);
        }
    });
    chatMessages.addEventListener("click", e => {
        const messageWrapper = e.target.closest(".message-wrapper");
        if (!messageWrapper) return;
        const timestampEl = messageWrapper.querySelector(".message-timestamp");
        if (timestampEl) {
            document.querySelectorAll(".message-timestamp.show").forEach(el => {
                if (el !== timestampEl) el.classList.remove("show");
            });
            timestampEl.classList.toggle("show");
        }
    });
    chatForm.addEventListener("submit", e => {
        e.preventDefault();
        const text = messageInput.value.trim();
        if (text) sendMessage(text);
    });
    messageInput.addEventListener("input", () => {
        sendButton.disabled = messageInput.value.trim() === "";
    });
});